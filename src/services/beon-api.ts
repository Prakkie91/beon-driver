/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.0.0 (NJsonSchema v9.12.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param userName (optional)
   * @param password (optional)
   * @return Success
   */
  login(userName: string | null | undefined, password: string | null | undefined): Observable<DriverInfoUpdateRequest> {
    let url_ = this.baseUrl + "/api/Driver/Login?";
    if (userName !== undefined)
      url_ += "userName=" + encodeURIComponent("" + userName) + "&";
    if (password !== undefined)
      url_ += "password=" + encodeURIComponent("" + password) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).flatMap((response_ : any) => {
      return this.processLogin(response_);
    }).catch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processLogin(<any>response_);
        } catch (e) {
          return <Observable<DriverInfoUpdateRequest>><any>Observable.throw(e);
        }
      } else
        return <Observable<DriverInfoUpdateRequest>><any>Observable.throw(response_);
    });
  }

  protected processLogin(response: HttpResponseBase): Observable<DriverInfoUpdateRequest> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DriverInfoUpdateRequest.fromJS(resultData200) : new DriverInfoUpdateRequest();
        return Observable.of(result200);
      });
    } else if (status === 500) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = resultData500 ? ErrorModel.fromJS(resultData500) : new ErrorModel();
        return throwException("A server error occurred.", status, _responseText, _headers, result500);
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).flatMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Observable.of<DriverInfoUpdateRequest>(<any>null);
  }

  /**
   * @param userName (optional)
   * @param isFull (optional)
   * @return Success
   */
  getDriverInfo(userName: string | null | undefined, isFull: boolean | null | undefined): Observable<DriverInfoResponse> {
    let url_ = this.baseUrl + "/api/Driver/GetDriverInfo?";
    if (userName !== undefined)
      url_ += "userName=" + encodeURIComponent("" + userName) + "&";
    if (isFull !== undefined)
      url_ += "isFull=" + encodeURIComponent("" + isFull) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).flatMap((response_ : any) => {
      return this.processGetDriverInfo(response_);
    }).catch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetDriverInfo(<any>response_);
        } catch (e) {
          return <Observable<DriverInfoResponse>><any>Observable.throw(e);
        }
      } else
        return <Observable<DriverInfoResponse>><any>Observable.throw(response_);
    });
  }

  protected processGetDriverInfo(response: HttpResponseBase): Observable<DriverInfoResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DriverInfoResponse.fromJS(resultData200) : new DriverInfoResponse();
        return Observable.of(result200);
      });
    } else if (status === 500) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = resultData500 ? ErrorModel.fromJS(resultData500) : new ErrorModel();
        return throwException("A server error occurred.", status, _responseText, _headers, result500);
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).flatMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Observable.of<DriverInfoResponse>(<any>null);
  }

  /**
   * @param data (optional)
   * @return Success
   */
  updateSettings(data: DriverInfoUpdateRequest | null | undefined): Observable<DriverInfoUpdateRequest> {
    let url_ = this.baseUrl + "/api/Driver/UpdateSetting";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(data);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).flatMap((response_ : any) => {
      return this.processUpdateSettings(response_);
    }).catch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdateSettings(<any>response_);
        } catch (e) {
          return <Observable<DriverInfoUpdateRequest>><any>Observable.throw(e);
        }
      } else
        return <Observable<DriverInfoUpdateRequest>><any>Observable.throw(response_);
    });
  }

  protected processUpdateSettings(response: HttpResponseBase): Observable<DriverInfoUpdateRequest> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DriverInfoUpdateRequest.fromJS(resultData200) : new DriverInfoUpdateRequest();
        return Observable.of(result200);
      });
    } else if (status === 500) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = resultData500 ? ErrorModel.fromJS(resultData500) : new ErrorModel();
        return throwException("A server error occurred.", status, _responseText, _headers, result500);
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).flatMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Observable.of<DriverInfoUpdateRequest>(<any>null);
  }

  /**
   * @param data (optional)
   * @return Success
   */
  signUp(data: DriverSignUpRequest | null | undefined): Observable<DriverSignUpRequest> {
    let url_ = this.baseUrl + "/api/Driver/SignUp";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(data);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).flatMap((response_ : any) => {
      return this.processSignUp(response_);
    }).catch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processSignUp(<any>response_);
        } catch (e) {
          return <Observable<DriverSignUpRequest>><any>Observable.throw(e);
        }
      } else
        return <Observable<DriverSignUpRequest>><any>Observable.throw(response_);
    });
  }

  protected processSignUp(response: HttpResponseBase): Observable<DriverSignUpRequest> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DriverSignUpRequest.fromJS(resultData200) : new DriverSignUpRequest();
        return Observable.of(result200);
      });
    } else if (status === 500) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = resultData500 ? ErrorModel.fromJS(resultData500) : new ErrorModel();
        return throwException("A server error occurred.", status, _responseText, _headers, result500);
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).flatMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Observable.of<DriverSignUpRequest>(<any>null);
  }

  /**
   * @param data (optional)
   * @return Success
   */
  driverVehicleTrackingEvent(data: CreateTrackingEventRequest | null | undefined): Observable<DriverVehicleTrackingEvent> {
    let url_ = this.baseUrl + "/api/DriverVehicleTrackingEvents/DriverVehicleTrackingEvent";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(data);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).flatMap((response_ : any) => {
      return this.processDriverVehicleTrackingEvent(response_);
    }).catch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDriverVehicleTrackingEvent(<any>response_);
        } catch (e) {
          return <Observable<DriverVehicleTrackingEvent>><any>Observable.throw(e);
        }
      } else
        return <Observable<DriverVehicleTrackingEvent>><any>Observable.throw(response_);
    });
  }

  protected processDriverVehicleTrackingEvent(response: HttpResponseBase): Observable<DriverVehicleTrackingEvent> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DriverVehicleTrackingEvent.fromJS(resultData200) : new DriverVehicleTrackingEvent();
        return Observable.of(result200);
      });
    } else if (status === 500) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = resultData500 ? ErrorModel.fromJS(resultData500) : new ErrorModel();
        return throwException("A server error occurred.", status, _responseText, _headers, result500);
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).flatMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Observable.of<DriverVehicleTrackingEvent>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  getJobOffers(id: string | null | undefined): Observable<JobOffer[]> {
    let url_ = this.baseUrl + "/api/JobOffers/GetJobOffers?";
    if (id !== undefined)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).flatMap((response_ : any) => {
      return this.processGetJobOffers(response_);
    }).catch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetJobOffers(<any>response_);
        } catch (e) {
          return <Observable<JobOffer[]>><any>Observable.throw(e);
        }
      } else
        return <Observable<JobOffer[]>><any>Observable.throw(response_);
    });
  }

  protected processGetJobOffers(response: HttpResponseBase): Observable<JobOffer[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (resultData200 && resultData200.constructor === Array) {
          result200 = [];
          for (let item of resultData200)
            result200.push(JobOffer.fromJS(item));
        }
        return Observable.of(result200);
      });
    } else if (status === 500) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = resultData500 ? ErrorModel.fromJS(resultData500) : new ErrorModel();
        return throwException("A server error occurred.", status, _responseText, _headers, result500);
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).flatMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Observable.of<JobOffer[]>(<any>null);
  }

  /**
   * @return Success
   */
  getJobOffer(id: number): Observable<JobOffer> {
    let url_ = this.baseUrl + "/api/JobOffers/GetJobOffer/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).flatMap((response_ : any) => {
      return this.processGetJobOffer(response_);
    }).catch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetJobOffer(<any>response_);
        } catch (e) {
          return <Observable<JobOffer>><any>Observable.throw(e);
        }
      } else
        return <Observable<JobOffer>><any>Observable.throw(response_);
    });
  }

  protected processGetJobOffer(response: HttpResponseBase): Observable<JobOffer> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? JobOffer.fromJS(resultData200) : new JobOffer();
        return Observable.of(result200);
      });
    } else if (status === 500) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = resultData500 ? ErrorModel.fromJS(resultData500) : new ErrorModel();
        return throwException("A server error occurred.", status, _responseText, _headers, result500);
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).flatMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Observable.of<JobOffer>(<any>null);
  }

  /**
   * @param vehicleCategoryId (optional)
   * @return Success
   */
  getVehicleBrands(vehicleCategoryId: number | null | undefined): Observable<VehicleBrand[]> {
    let url_ = this.baseUrl + "/api/Vehicles/GetVehicleBrands?";
    if (vehicleCategoryId !== undefined)
      url_ += "vehicleCategoryId=" + encodeURIComponent("" + vehicleCategoryId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).flatMap((response_ : any) => {
      return this.processGetVehicleBrands(response_);
    }).catch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetVehicleBrands(<any>response_);
        } catch (e) {
          return <Observable<VehicleBrand[]>><any>Observable.throw(e);
        }
      } else
        return <Observable<VehicleBrand[]>><any>Observable.throw(response_);
    });
  }

  protected processGetVehicleBrands(response: HttpResponseBase): Observable<VehicleBrand[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (resultData200 && resultData200.constructor === Array) {
          result200 = [];
          for (let item of resultData200)
            result200.push(VehicleBrand.fromJS(item));
        }
        return Observable.of(result200);
      });
    } else if (status === 500) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = resultData500 ? ErrorModel.fromJS(resultData500) : new ErrorModel();
        return throwException("A server error occurred.", status, _responseText, _headers, result500);
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).flatMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Observable.of<VehicleBrand[]>(<any>null);
  }

  /**
   * @return Success
   */
  getVehicleCategories(): Observable<VehicleCategory[]> {
    let url_ = this.baseUrl + "/api/Vehicles/GetVehicleCategories";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).flatMap((response_ : any) => {
      return this.processGetVehicleCategories(response_);
    }).catch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetVehicleCategories(<any>response_);
        } catch (e) {
          return <Observable<VehicleCategory[]>><any>Observable.throw(e);
        }
      } else
        return <Observable<VehicleCategory[]>><any>Observable.throw(response_);
    });
  }

  protected processGetVehicleCategories(response: HttpResponseBase): Observable<VehicleCategory[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (resultData200 && resultData200.constructor === Array) {
          result200 = [];
          for (let item of resultData200)
            result200.push(VehicleCategory.fromJS(item));
        }
        return Observable.of(result200);
      });
    } else if (status === 500) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = resultData500 ? ErrorModel.fromJS(resultData500) : new ErrorModel();
        return throwException("A server error occurred.", status, _responseText, _headers, result500);
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).flatMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Observable.of<VehicleCategory[]>(<any>null);
  }

  /**
   * @param userId (optional)
   * @return Success
   */
  withdraw(userId: string | null | undefined): Observable<WalletEntry> {
    let url_ = this.baseUrl + "/api/Wallet/Withdraw?";
    if (userId !== undefined)
      url_ += "userId=" + encodeURIComponent("" + userId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).flatMap((response_ : any) => {
      return this.processWithdraw(response_);
    }).catch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processWithdraw(<any>response_);
        } catch (e) {
          return <Observable<WalletEntry>><any>Observable.throw(e);
        }
      } else
        return <Observable<WalletEntry>><any>Observable.throw(response_);
    });
  }

  protected processWithdraw(response: HttpResponseBase): Observable<WalletEntry> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? WalletEntry.fromJS(resultData200) : new WalletEntry();
        return Observable.of(result200);
      });
    } else if (status === 500) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = resultData500 ? ErrorModel.fromJS(resultData500) : new ErrorModel();
        return throwException("A server error occurred.", status, _responseText, _headers, result500);
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).flatMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Observable.of<WalletEntry>(<any>null);
  }

  /**
   * @param userId (optional)
   * @return Success
   */
  getWallet(userId: string | null | undefined): Observable<WalletEntry[]> {
    let url_ = this.baseUrl + "/api/Wallet/GetWalletEntries?";
    if (userId !== undefined)
      url_ += "userId=" + encodeURIComponent("" + userId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).flatMap((response_ : any) => {
      return this.processGetWallet(response_);
    }).catch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetWallet(<any>response_);
        } catch (e) {
          return <Observable<WalletEntry[]>><any>Observable.throw(e);
        }
      } else
        return <Observable<WalletEntry[]>><any>Observable.throw(response_);
    });
  }

  protected processGetWallet(response: HttpResponseBase): Observable<WalletEntry[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
    if (status === 200) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (resultData200 && resultData200.constructor === Array) {
          result200 = [];
          for (let item of resultData200)
            result200.push(WalletEntry.fromJS(item));
        }
        return Observable.of(result200);
      });
    } else if (status === 500) {
      return blobToText(responseBlob).flatMap(_responseText => {
        let result500: any = null;
        let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result500 = resultData500 ? ErrorModel.fromJS(resultData500) : new ErrorModel();
        return throwException("A server error occurred.", status, _responseText, _headers, result500);
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).flatMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Observable.of<WalletEntry[]>(<any>null);
  }
}

export class DriverInfoUpdateRequest implements IDriverInfoUpdateRequest {
  userName?: string | undefined;
  fullName?: string | undefined;
  phoneNumber?: string | undefined;
  email?: string | undefined;
  address?: string | undefined;
  state?: string | undefined;
  countryId?: number | undefined;
  zipCode?: string | undefined;

  constructor(data?: IDriverInfoUpdateRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.userName = data["userName"];
      this.fullName = data["fullName"];
      this.phoneNumber = data["phoneNumber"];
      this.email = data["email"];
      this.address = data["address"];
      this.state = data["state"];
      this.countryId = data["countryId"];
      this.zipCode = data["zipCode"];
    }
  }

  static fromJS(data: any): DriverInfoUpdateRequest {
    data = typeof data === 'object' ? data : {};
    let result = new DriverInfoUpdateRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userName"] = this.userName;
    data["fullName"] = this.fullName;
    data["phoneNumber"] = this.phoneNumber;
    data["email"] = this.email;
    data["address"] = this.address;
    data["state"] = this.state;
    data["countryId"] = this.countryId;
    data["zipCode"] = this.zipCode;
    return data;
  }
}

export interface IDriverInfoUpdateRequest {
  userName?: string | undefined;
  fullName?: string | undefined;
  phoneNumber?: string | undefined;
  email?: string | undefined;
  address?: string | undefined;
  state?: string | undefined;
  countryId?: number | undefined;
  zipCode?: string | undefined;
}

export class ErrorModel implements IErrorModel {
  messages?: string[] | undefined;

  constructor(data?: IErrorModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      if (data["messages"] && data["messages"].constructor === Array) {
        this.messages = [];
        for (let item of data["messages"])
          this.messages.push(item);
      }
    }
  }

  static fromJS(data: any): ErrorModel {
    data = typeof data === 'object' ? data : {};
    let result = new ErrorModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (this.messages && this.messages.constructor === Array) {
      data["messages"] = [];
      for (let item of this.messages)
        data["messages"].push(item);
    }
    return data;
  }
}

export interface IErrorModel {
  messages?: string[] | undefined;
}

export class DriverInfoResponse implements IDriverInfoResponse {
  userName?: string | undefined;
  status?: DriverInfoResponseStatus | undefined;
  addressInfo?: AddressInfo | undefined;
  earnings?: Earnings | undefined;
  vehicleModel?: VehicleModel | undefined;

  constructor(data?: IDriverInfoResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.userName = data["userName"];
      this.status = data["status"];
      this.addressInfo = data["addressInfo"] ? AddressInfo.fromJS(data["addressInfo"]) : <any>undefined;
      this.earnings = data["earnings"] ? Earnings.fromJS(data["earnings"]) : <any>undefined;
      this.vehicleModel = data["vehicleModel"] ? VehicleModel.fromJS(data["vehicleModel"]) : <any>undefined;
    }
  }

  static fromJS(data: any): DriverInfoResponse {
    data = typeof data === 'object' ? data : {};
    let result = new DriverInfoResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userName"] = this.userName;
    data["status"] = this.status;
    data["addressInfo"] = this.addressInfo ? this.addressInfo.toJSON() : <any>undefined;
    data["earnings"] = this.earnings ? this.earnings.toJSON() : <any>undefined;
    data["vehicleModel"] = this.vehicleModel ? this.vehicleModel.toJSON() : <any>undefined;
    return data;
  }
}

export interface IDriverInfoResponse {
  userName?: string | undefined;
  status?: DriverInfoResponseStatus | undefined;
  addressInfo?: AddressInfo | undefined;
  earnings?: Earnings | undefined;
  vehicleModel?: VehicleModel | undefined;
}

export class AddressInfo implements IAddressInfo {
  address?: string | undefined;
  state?: string | undefined;
  country?: Country | undefined;
  zipCode?: string | undefined;
  phoneNumber?: string | undefined;

  constructor(data?: IAddressInfo) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.address = data["address"];
      this.state = data["state"];
      this.country = data["country"] ? Country.fromJS(data["country"]) : <any>undefined;
      this.zipCode = data["zipCode"];
      this.phoneNumber = data["phoneNumber"];
    }
  }

  static fromJS(data: any): AddressInfo {
    data = typeof data === 'object' ? data : {};
    let result = new AddressInfo();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["address"] = this.address;
    data["state"] = this.state;
    data["country"] = this.country ? this.country.toJSON() : <any>undefined;
    data["zipCode"] = this.zipCode;
    data["phoneNumber"] = this.phoneNumber;
    return data;
  }
}

export interface IAddressInfo {
  address?: string | undefined;
  state?: string | undefined;
  country?: Country | undefined;
  zipCode?: string | undefined;
  phoneNumber?: string | undefined;
}

export class Earnings implements IEarnings {
  totalEarnings?: number | undefined;
  driveHours?: number | undefined;

  constructor(data?: IEarnings) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.totalEarnings = data["totalEarnings"];
      this.driveHours = data["driveHours"];
    }
  }

  static fromJS(data: any): Earnings {
    data = typeof data === 'object' ? data : {};
    let result = new Earnings();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["totalEarnings"] = this.totalEarnings;
    data["driveHours"] = this.driveHours;
    return data;
  }
}

export interface IEarnings {
  totalEarnings?: number | undefined;
  driveHours?: number | undefined;
}

export class VehicleModel implements IVehicleModel {
  id?: number | undefined;
  name?: string | undefined;
  registrationNumber?: string | undefined;
  brand?: VehicleBrand | undefined;
  categoryClass?: VehicleCategoryClass | undefined;
  vehicleCondition?: VehicleModelVehicleCondition | undefined;

  constructor(data?: IVehicleModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["id"];
      this.name = data["name"];
      this.registrationNumber = data["registrationNumber"];
      this.brand = data["brand"] ? VehicleBrand.fromJS(data["brand"]) : <any>undefined;
      this.categoryClass = data["categoryClass"] ? VehicleCategoryClass.fromJS(data["categoryClass"]) : <any>undefined;
      this.vehicleCondition = data["vehicleCondition"];
    }
  }

  static fromJS(data: any): VehicleModel {
    data = typeof data === 'object' ? data : {};
    let result = new VehicleModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["registrationNumber"] = this.registrationNumber;
    data["brand"] = this.brand ? this.brand.toJSON() : <any>undefined;
    data["categoryClass"] = this.categoryClass ? this.categoryClass.toJSON() : <any>undefined;
    data["vehicleCondition"] = this.vehicleCondition;
    return data;
  }
}

export interface IVehicleModel {
  id?: number | undefined;
  name?: string | undefined;
  registrationNumber?: string | undefined;
  brand?: VehicleBrand | undefined;
  categoryClass?: VehicleCategoryClass | undefined;
  vehicleCondition?: VehicleModelVehicleCondition | undefined;
}

export class Country implements ICountry {
  id?: number | undefined;
  name: string;

  constructor(data?: ICountry) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["id"];
      this.name = data["name"];
    }
  }

  static fromJS(data: any): Country {
    data = typeof data === 'object' ? data : {};
    let result = new Country();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    return data;
  }
}

export interface ICountry {
  id?: number | undefined;
  name: string;
}

export class VehicleBrand implements IVehicleBrand {
  id?: number | undefined;
  name: string;

  constructor(data?: IVehicleBrand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["id"];
      this.name = data["name"];
    }
  }

  static fromJS(data: any): VehicleBrand {
    data = typeof data === 'object' ? data : {};
    let result = new VehicleBrand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    return data;
  }
}

export interface IVehicleBrand {
  id?: number | undefined;
  name: string;
}

export class VehicleCategoryClass implements IVehicleCategoryClass {
  id?: number | undefined;
  name: string;
  categoryName?: string | undefined;
  vehicleCategoryId?: number | undefined;

  constructor(data?: IVehicleCategoryClass) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["id"];
      this.name = data["name"];
      this.categoryName = data["categoryName"];
      this.vehicleCategoryId = data["vehicleCategoryId"];
    }
  }

  static fromJS(data: any): VehicleCategoryClass {
    data = typeof data === 'object' ? data : {};
    let result = new VehicleCategoryClass();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["categoryName"] = this.categoryName;
    data["vehicleCategoryId"] = this.vehicleCategoryId;
    return data;
  }
}

export interface IVehicleCategoryClass {
  id?: number | undefined;
  name: string;
  categoryName?: string | undefined;
  vehicleCategoryId?: number | undefined;
}

export class DriverSignUpRequest implements IDriverSignUpRequest {
  password?: string | undefined;
  address?: string | undefined;
  state?: string | undefined;
  zipcode?: string | undefined;
  fullName?: string | undefined;
  phoneNumber?: string | undefined;
  email?: string | undefined;
  countryId?: number | undefined;
  vehicleCategoryClassId?: number | undefined;
  vehicleBrandId?: number | undefined;
  vehicleModel?: string | undefined;
  vehiclePlateNumber?: string | undefined;
  identityNumber?: string | undefined;

  constructor(data?: IDriverSignUpRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.password = data["password"];
      this.address = data["address"];
      this.state = data["state"];
      this.zipcode = data["zipcode"];
      this.fullName = data["fullName"];
      this.phoneNumber = data["phoneNumber"];
      this.email = data["email"];
      this.countryId = data["countryId"];
      this.vehicleCategoryClassId = data["vehicleCategoryClassId"];
      this.vehicleBrandId = data["vehicleBrandId"];
      this.vehicleModel = data["vehicleModel"];
      this.vehiclePlateNumber = data["vehiclePlateNumber"];
      this.identityNumber = data["identityNumber"];
    }
  }

  static fromJS(data: any): DriverSignUpRequest {
    data = typeof data === 'object' ? data : {};
    let result = new DriverSignUpRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["password"] = this.password;
    data["address"] = this.address;
    data["state"] = this.state;
    data["zipcode"] = this.zipcode;
    data["fullName"] = this.fullName;
    data["phoneNumber"] = this.phoneNumber;
    data["email"] = this.email;
    data["countryId"] = this.countryId;
    data["vehicleCategoryClassId"] = this.vehicleCategoryClassId;
    data["vehicleBrandId"] = this.vehicleBrandId;
    data["vehicleModel"] = this.vehicleModel;
    data["vehiclePlateNumber"] = this.vehiclePlateNumber;
    data["identityNumber"] = this.identityNumber;
    return data;
  }
}

export interface IDriverSignUpRequest {
  password?: string | undefined;
  address?: string | undefined;
  state?: string | undefined;
  zipcode?: string | undefined;
  fullName?: string | undefined;
  phoneNumber?: string | undefined;
  email?: string | undefined;
  countryId?: number | undefined;
  vehicleCategoryClassId?: number | undefined;
  vehicleBrandId?: number | undefined;
  vehicleModel?: string | undefined;
  vehiclePlateNumber?: string | undefined;
  identityNumber?: string | undefined;
}

export class CreateTrackingEventRequest implements ICreateTrackingEventRequest {
  driverVehicleId?: number | undefined;
  altitude?: number | undefined;
  longitude?: number | undefined;
  latitude?: number | undefined;

  constructor(data?: ICreateTrackingEventRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.driverVehicleId = data["driverVehicleId"];
      this.altitude = data["altitude"];
      this.longitude = data["longitude"];
      this.latitude = data["latitude"];
    }
  }

  static fromJS(data: any): CreateTrackingEventRequest {
    data = typeof data === 'object' ? data : {};
    let result = new CreateTrackingEventRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["driverVehicleId"] = this.driverVehicleId;
    data["altitude"] = this.altitude;
    data["longitude"] = this.longitude;
    data["latitude"] = this.latitude;
    return data;
  }
}

export interface ICreateTrackingEventRequest {
  driverVehicleId?: number | undefined;
  altitude?: number | undefined;
  longitude?: number | undefined;
  latitude?: number | undefined;
}

export class DriverVehicleTrackingEvent implements IDriverVehicleTrackingEvent {
  id?: number | undefined;
  driverVehicleId?: number | undefined;
  driverVehicle?: DriverVehicle | undefined;
  createDateTime?: Date | undefined;
  altitude: number;
  longitude: number;
  latitude: number;

  constructor(data?: IDriverVehicleTrackingEvent) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["id"];
      this.driverVehicleId = data["driverVehicleId"];
      this.driverVehicle = data["driverVehicle"] ? DriverVehicle.fromJS(data["driverVehicle"]) : <any>undefined;
      this.createDateTime = data["createDateTime"] ? new Date(data["createDateTime"].toString()) : <any>undefined;
      this.altitude = data["altitude"];
      this.longitude = data["longitude"];
      this.latitude = data["latitude"];
    }
  }

  static fromJS(data: any): DriverVehicleTrackingEvent {
    data = typeof data === 'object' ? data : {};
    let result = new DriverVehicleTrackingEvent();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["driverVehicleId"] = this.driverVehicleId;
    data["driverVehicle"] = this.driverVehicle ? this.driverVehicle.toJSON() : <any>undefined;
    data["createDateTime"] = this.createDateTime ? this.createDateTime.toISOString() : <any>undefined;
    data["altitude"] = this.altitude;
    data["longitude"] = this.longitude;
    data["latitude"] = this.latitude;
    return data;
  }
}

export interface IDriverVehicleTrackingEvent {
  id?: number | undefined;
  driverVehicleId?: number | undefined;
  driverVehicle?: DriverVehicle | undefined;
  createDateTime?: Date | undefined;
  altitude: number;
  longitude: number;
  latitude: number;
}

export class DriverVehicle implements IDriverVehicle {
  id?: number | undefined;
  driverId?: number | undefined;
  driver?: Driver | undefined;
  trackingDeviceUID?: string | undefined;
  model: string;
  registrationNumber: string;
  vehicleBrandId: number;
  vehicleBrand?: VehicleBrand | undefined;
  vehicleCategoryClassId: number;
  vehicleCategoryClass?: VehicleCategoryClass | undefined;
  vehicleModel: string;
  condition: DriverVehicleCondition;
  driverVehiclePlacementAreas?: DriverVehiclePlacementArea[] | undefined;
  status: DriverVehicleStatus;
  driverVehicleTrackingEvents?: DriverVehicleTrackingEvent[] | undefined;

  constructor(data?: IDriverVehicle) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["id"];
      this.driverId = data["driverId"];
      this.driver = data["driver"] ? Driver.fromJS(data["driver"]) : <any>undefined;
      this.trackingDeviceUID = data["trackingDeviceUID"];
      this.model = data["model"];
      this.registrationNumber = data["registrationNumber"];
      this.vehicleBrandId = data["vehicleBrandId"];
      this.vehicleBrand = data["vehicleBrand"] ? VehicleBrand.fromJS(data["vehicleBrand"]) : <any>undefined;
      this.vehicleCategoryClassId = data["vehicleCategoryClassId"];
      this.vehicleCategoryClass = data["vehicleCategoryClass"] ? VehicleCategoryClass.fromJS(data["vehicleCategoryClass"]) : <any>undefined;
      this.vehicleModel = data["vehicleModel"];
      this.condition = data["condition"];
      if (data["driverVehiclePlacementAreas"] && data["driverVehiclePlacementAreas"].constructor === Array) {
        this.driverVehiclePlacementAreas = [];
        for (let item of data["driverVehiclePlacementAreas"])
          this.driverVehiclePlacementAreas.push(DriverVehiclePlacementArea.fromJS(item));
      }
      this.status = data["status"];
      if (data["driverVehicleTrackingEvents"] && data["driverVehicleTrackingEvents"].constructor === Array) {
        this.driverVehicleTrackingEvents = [];
        for (let item of data["driverVehicleTrackingEvents"])
          this.driverVehicleTrackingEvents.push(DriverVehicleTrackingEvent.fromJS(item));
      }
    }
  }

  static fromJS(data: any): DriverVehicle {
    data = typeof data === 'object' ? data : {};
    let result = new DriverVehicle();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["driverId"] = this.driverId;
    data["driver"] = this.driver ? this.driver.toJSON() : <any>undefined;
    data["trackingDeviceUID"] = this.trackingDeviceUID;
    data["model"] = this.model;
    data["registrationNumber"] = this.registrationNumber;
    data["vehicleBrandId"] = this.vehicleBrandId;
    data["vehicleBrand"] = this.vehicleBrand ? this.vehicleBrand.toJSON() : <any>undefined;
    data["vehicleCategoryClassId"] = this.vehicleCategoryClassId;
    data["vehicleCategoryClass"] = this.vehicleCategoryClass ? this.vehicleCategoryClass.toJSON() : <any>undefined;
    data["vehicleModel"] = this.vehicleModel;
    data["condition"] = this.condition;
    if (this.driverVehiclePlacementAreas && this.driverVehiclePlacementAreas.constructor === Array) {
      data["driverVehiclePlacementAreas"] = [];
      for (let item of this.driverVehiclePlacementAreas)
        data["driverVehiclePlacementAreas"].push(item.toJSON());
    }
    data["status"] = this.status;
    if (this.driverVehicleTrackingEvents && this.driverVehicleTrackingEvents.constructor === Array) {
      data["driverVehicleTrackingEvents"] = [];
      for (let item of this.driverVehicleTrackingEvents)
        data["driverVehicleTrackingEvents"].push(item.toJSON());
    }
    return data;
  }
}

export interface IDriverVehicle {
  id?: number | undefined;
  driverId?: number | undefined;
  driver?: Driver | undefined;
  trackingDeviceUID?: string | undefined;
  model: string;
  registrationNumber: string;
  vehicleBrandId: number;
  vehicleBrand?: VehicleBrand | undefined;
  vehicleCategoryClassId: number;
  vehicleCategoryClass?: VehicleCategoryClass | undefined;
  vehicleModel: string;
  condition: DriverVehicleCondition;
  driverVehiclePlacementAreas?: DriverVehiclePlacementArea[] | undefined;
  status: DriverVehicleStatus;
  driverVehicleTrackingEvents?: DriverVehicleTrackingEvent[] | undefined;
}

export class Driver implements IDriver {
  applicationUserId?: string | undefined;
  id?: number | undefined;
  identityNumber: string;
  identityDocumentType: DriverIdentityDocumentType;
  identityDocument: string;
  status?: DriverStatus | undefined;
  vehicles?: DriverVehicle[] | undefined;
  walletEntries?: WalletEntry[] | undefined;

  constructor(data?: IDriver) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.applicationUserId = data["applicationUserId"];
      this.id = data["id"];
      this.identityNumber = data["identityNumber"];
      this.identityDocumentType = data["identityDocumentType"];
      this.identityDocument = data["identityDocument"];
      this.status = data["status"];
      if (data["vehicles"] && data["vehicles"].constructor === Array) {
        this.vehicles = [];
        for (let item of data["vehicles"])
          this.vehicles.push(DriverVehicle.fromJS(item));
      }
      if (data["walletEntries"] && data["walletEntries"].constructor === Array) {
        this.walletEntries = [];
        for (let item of data["walletEntries"])
          this.walletEntries.push(WalletEntry.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Driver {
    data = typeof data === 'object' ? data : {};
    let result = new Driver();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["applicationUserId"] = this.applicationUserId;
    data["id"] = this.id;
    data["identityNumber"] = this.identityNumber;
    data["identityDocumentType"] = this.identityDocumentType;
    data["identityDocument"] = this.identityDocument;
    data["status"] = this.status;
    if (this.vehicles && this.vehicles.constructor === Array) {
      data["vehicles"] = [];
      for (let item of this.vehicles)
        data["vehicles"].push(item.toJSON());
    }
    if (this.walletEntries && this.walletEntries.constructor === Array) {
      data["walletEntries"] = [];
      for (let item of this.walletEntries)
        data["walletEntries"].push(item.toJSON());
    }
    return data;
  }
}

export interface IDriver {
  applicationUserId?: string | undefined;
  id?: number | undefined;
  identityNumber: string;
  identityDocumentType: DriverIdentityDocumentType;
  identityDocument: string;
  status?: DriverStatus | undefined;
  vehicles?: DriverVehicle[] | undefined;
  walletEntries?: WalletEntry[] | undefined;
}

export class DriverVehiclePlacementArea implements IDriverVehiclePlacementArea {
  id?: number | undefined;
  driverVehicleId?: number | undefined;
  driverVehicle?: DriverVehicle | undefined;
  placementAreaId?: number | undefined;
  placementArea?: PlacementArea | undefined;
  status?: DriverVehiclePlacementAreaStatus | undefined;
  jobOffers?: JobOffer[] | undefined;

  constructor(data?: IDriverVehiclePlacementArea) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["id"];
      this.driverVehicleId = data["driverVehicleId"];
      this.driverVehicle = data["driverVehicle"] ? DriverVehicle.fromJS(data["driverVehicle"]) : <any>undefined;
      this.placementAreaId = data["placementAreaId"];
      this.placementArea = data["placementArea"] ? PlacementArea.fromJS(data["placementArea"]) : <any>undefined;
      this.status = data["status"];
      if (data["jobOffers"] && data["jobOffers"].constructor === Array) {
        this.jobOffers = [];
        for (let item of data["jobOffers"])
          this.jobOffers.push(JobOffer.fromJS(item));
      }
    }
  }

  static fromJS(data: any): DriverVehiclePlacementArea {
    data = typeof data === 'object' ? data : {};
    let result = new DriverVehiclePlacementArea();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["driverVehicleId"] = this.driverVehicleId;
    data["driverVehicle"] = this.driverVehicle ? this.driverVehicle.toJSON() : <any>undefined;
    data["placementAreaId"] = this.placementAreaId;
    data["placementArea"] = this.placementArea ? this.placementArea.toJSON() : <any>undefined;
    data["status"] = this.status;
    if (this.jobOffers && this.jobOffers.constructor === Array) {
      data["jobOffers"] = [];
      for (let item of this.jobOffers)
        data["jobOffers"].push(item.toJSON());
    }
    return data;
  }
}

export interface IDriverVehiclePlacementArea {
  id?: number | undefined;
  driverVehicleId?: number | undefined;
  driverVehicle?: DriverVehicle | undefined;
  placementAreaId?: number | undefined;
  placementArea?: PlacementArea | undefined;
  status?: DriverVehiclePlacementAreaStatus | undefined;
  jobOffers?: JobOffer[] | undefined;
}

export class WalletEntry implements IWalletEntry {
  id?: number | undefined;
  driverId?: number | undefined;
  driver?: Driver | undefined;
  status?: WalletEntryStatus | undefined;
  createDateTime?: Date | undefined;
  amount?: number | undefined;
  currency?: WalletEntryCurrency | undefined;

  constructor(data?: IWalletEntry) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["id"];
      this.driverId = data["driverId"];
      this.driver = data["driver"] ? Driver.fromJS(data["driver"]) : <any>undefined;
      this.status = data["status"];
      this.createDateTime = data["createDateTime"] ? new Date(data["createDateTime"].toString()) : <any>undefined;
      this.amount = data["amount"];
      this.currency = data["currency"];
    }
  }

  static fromJS(data: any): WalletEntry {
    data = typeof data === 'object' ? data : {};
    let result = new WalletEntry();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["driverId"] = this.driverId;
    data["driver"] = this.driver ? this.driver.toJSON() : <any>undefined;
    data["status"] = this.status;
    data["createDateTime"] = this.createDateTime ? this.createDateTime.toISOString() : <any>undefined;
    data["amount"] = this.amount;
    data["currency"] = this.currency;
    return data;
  }
}

export interface IWalletEntry {
  id?: number | undefined;
  driverId?: number | undefined;
  driver?: Driver | undefined;
  status?: WalletEntryStatus | undefined;
  createDateTime?: Date | undefined;
  amount?: number | undefined;
  currency?: WalletEntryCurrency | undefined;
}

export class PlacementArea implements IPlacementArea {
  id?: number | undefined;
  vehicleCategoryClassId: number;
  vehicleCategoryClass?: VehicleCategoryClass | undefined;
  name: string;
  height: number;
  width: number;
  area: number;

  constructor(data?: IPlacementArea) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["id"];
      this.vehicleCategoryClassId = data["vehicleCategoryClassId"];
      this.vehicleCategoryClass = data["vehicleCategoryClass"] ? VehicleCategoryClass.fromJS(data["vehicleCategoryClass"]) : <any>undefined;
      this.name = data["name"];
      this.height = data["height"];
      this.width = data["width"];
      this.area = data["area"];
    }
  }

  static fromJS(data: any): PlacementArea {
    data = typeof data === 'object' ? data : {};
    let result = new PlacementArea();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["vehicleCategoryClassId"] = this.vehicleCategoryClassId;
    data["vehicleCategoryClass"] = this.vehicleCategoryClass ? this.vehicleCategoryClass.toJSON() : <any>undefined;
    data["name"] = this.name;
    data["height"] = this.height;
    data["width"] = this.width;
    data["area"] = this.area;
    return data;
  }
}

export interface IPlacementArea {
  id?: number | undefined;
  vehicleCategoryClassId: number;
  vehicleCategoryClass?: VehicleCategoryClass | undefined;
  name: string;
  height: number;
  width: number;
  area: number;
}

export class JobOffer implements IJobOffer {
  id?: number | undefined;
  creativeId?: number | undefined;
  creative?: Creative | undefined;
  status?: JobOfferStatus | undefined;
  driverVehiclePlacementAreaId?: number | undefined;
  driverVehiclePlacementArea?: DriverVehiclePlacementArea | undefined;

  constructor(data?: IJobOffer) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["id"];
      this.creativeId = data["creativeId"];
      this.creative = data["creative"] ? Creative.fromJS(data["creative"]) : <any>undefined;
      this.status = data["status"];
      this.driverVehiclePlacementAreaId = data["driverVehiclePlacementAreaId"];
      this.driverVehiclePlacementArea = data["driverVehiclePlacementArea"] ? DriverVehiclePlacementArea.fromJS(data["driverVehiclePlacementArea"]) : <any>undefined;
    }
  }

  static fromJS(data: any): JobOffer {
    data = typeof data === 'object' ? data : {};
    let result = new JobOffer();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["creativeId"] = this.creativeId;
    data["creative"] = this.creative ? this.creative.toJSON() : <any>undefined;
    data["status"] = this.status;
    data["driverVehiclePlacementAreaId"] = this.driverVehiclePlacementAreaId;
    data["driverVehiclePlacementArea"] = this.driverVehiclePlacementArea ? this.driverVehiclePlacementArea.toJSON() : <any>undefined;
    return data;
  }
}

export interface IJobOffer {
  id?: number | undefined;
  creativeId?: number | undefined;
  creative?: Creative | undefined;
  status?: JobOfferStatus | undefined;
  driverVehiclePlacementAreaId?: number | undefined;
  driverVehiclePlacementArea?: DriverVehiclePlacementArea | undefined;
}

export class Creative implements ICreative {
  id?: number | undefined;
  name: string;
  numberOfVehicles: number;
  vehicleCategoryClassId: number;
  vehicleCategoryClass?: VehicleCategoryClass | undefined;
  createDateTime?: Date | undefined;
  startDate?: Date | undefined;
  endDate?: Date | undefined;
  creativeTargetAreas?: CreativeTargetArea[] | undefined;

  constructor(data?: ICreative) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["id"];
      this.name = data["name"];
      this.numberOfVehicles = data["numberOfVehicles"];
      this.vehicleCategoryClassId = data["vehicleCategoryClassId"];
      this.vehicleCategoryClass = data["vehicleCategoryClass"] ? VehicleCategoryClass.fromJS(data["vehicleCategoryClass"]) : <any>undefined;
      this.createDateTime = data["createDateTime"] ? new Date(data["createDateTime"].toString()) : <any>undefined;
      this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : <any>undefined;
      this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : <any>undefined;
      if (data["creativeTargetAreas"] && data["creativeTargetAreas"].constructor === Array) {
        this.creativeTargetAreas = [];
        for (let item of data["creativeTargetAreas"])
          this.creativeTargetAreas.push(CreativeTargetArea.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Creative {
    data = typeof data === 'object' ? data : {};
    let result = new Creative();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["numberOfVehicles"] = this.numberOfVehicles;
    data["vehicleCategoryClassId"] = this.vehicleCategoryClassId;
    data["vehicleCategoryClass"] = this.vehicleCategoryClass ? this.vehicleCategoryClass.toJSON() : <any>undefined;
    data["createDateTime"] = this.createDateTime ? this.createDateTime.toISOString() : <any>undefined;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
    if (this.creativeTargetAreas && this.creativeTargetAreas.constructor === Array) {
      data["creativeTargetAreas"] = [];
      for (let item of this.creativeTargetAreas)
        data["creativeTargetAreas"].push(item.toJSON());
    }
    return data;
  }
}

export interface ICreative {
  id?: number | undefined;
  name: string;
  numberOfVehicles: number;
  vehicleCategoryClassId: number;
  vehicleCategoryClass?: VehicleCategoryClass | undefined;
  createDateTime?: Date | undefined;
  startDate?: Date | undefined;
  endDate?: Date | undefined;
  creativeTargetAreas?: CreativeTargetArea[] | undefined;
}

export class CreativeTargetArea implements ICreativeTargetArea {
  id?: number | undefined;
  creativeId?: number | undefined;
  creative?: Creative | undefined;
  radius: number;
  longitude: number;
  latitude: number;

  constructor(data?: ICreativeTargetArea) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["id"];
      this.creativeId = data["creativeId"];
      this.creative = data["creative"] ? Creative.fromJS(data["creative"]) : <any>undefined;
      this.radius = data["radius"];
      this.longitude = data["longitude"];
      this.latitude = data["latitude"];
    }
  }

  static fromJS(data: any): CreativeTargetArea {
    data = typeof data === 'object' ? data : {};
    let result = new CreativeTargetArea();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["creativeId"] = this.creativeId;
    data["creative"] = this.creative ? this.creative.toJSON() : <any>undefined;
    data["radius"] = this.radius;
    data["longitude"] = this.longitude;
    data["latitude"] = this.latitude;
    return data;
  }
}

export interface ICreativeTargetArea {
  id?: number | undefined;
  creativeId?: number | undefined;
  creative?: Creative | undefined;
  radius: number;
  longitude: number;
  latitude: number;
}

export class VehicleCategory implements IVehicleCategory {
  id?: number | undefined;
  name: string;
  vehicleClasses?: VehicleCategoryClass[] | undefined;

  constructor(data?: IVehicleCategory) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.id = data["id"];
      this.name = data["name"];
      if (data["vehicleClasses"] && data["vehicleClasses"].constructor === Array) {
        this.vehicleClasses = [];
        for (let item of data["vehicleClasses"])
          this.vehicleClasses.push(VehicleCategoryClass.fromJS(item));
      }
    }
  }

  static fromJS(data: any): VehicleCategory {
    data = typeof data === 'object' ? data : {};
    let result = new VehicleCategory();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    if (this.vehicleClasses && this.vehicleClasses.constructor === Array) {
      data["vehicleClasses"] = [];
      for (let item of this.vehicleClasses)
        data["vehicleClasses"].push(item.toJSON());
    }
    return data;
  }
}

export interface IVehicleCategory {
  id?: number | undefined;
  name: string;
  vehicleClasses?: VehicleCategoryClass[] | undefined;
}

export enum DriverInfoResponseStatus {
  _1 = 1,
  _2 = 2,
  _3 = 3,
  _4 = 4,
}

export enum VehicleModelVehicleCondition {
  _1 = 1,
  _2 = 2,
  _3 = 3,
  _4 = 4,
  _5 = 5,
}

export enum DriverVehicleCondition {
  _1 = 1,
  _2 = 2,
  _3 = 3,
  _4 = 4,
  _5 = 5,
}

export enum DriverVehicleStatus {
  _1 = 1,
  _2 = 2,
  _3 = 3,
  _4 = 4,
  _5 = 5,
}

export enum DriverIdentityDocumentType {
  _1 = 1,
  _2 = 2,
}

export enum DriverStatus {
  _1 = 1,
  _2 = 2,
  _3 = 3,
  _4 = 4,
}

export enum DriverVehiclePlacementAreaStatus {
  _1 = 1,
  _2 = 2,
}

export enum WalletEntryStatus {
  _1 = 1,
  _2 = 2,
}

export enum WalletEntryCurrency {
  _1 = 1,
  _2 = 2,
}

export enum JobOfferStatus {
  _1 = 1,
  _2 = 2,
  _3 = 3,
  _4 = 4,
}

export class SwaggerException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isSwaggerException = true;

  static isSwaggerException(obj: any): obj is SwaggerException {
    return obj.isSwaggerException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if(result !== null && result !== undefined)
    return Observable.throw(result);
  else
    return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((<any>event.target).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
